Ndoqa kete video per hapat e para deri tek dokumenti, pasi krijova ambientet ne Ubuntu 20.4: 
https://www.youtube.com/watch?v=BrVHwQ-SJUA rreth 301 min 
github: Project code: https://github.com/justdjango/dream_blog

dokumenti:https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04
video 2, me me shume detaje: https://www.youtube.com/watch?v=0PJjquyGTOQ rreth 1 ore e 5 min / 2019 
video e kursit blog(i njejti autor): https://codingwithmitch.com/courses/building-a-website-django-python/
https://github.com/mitchtabian/CodingWithMitch-Blog-Course

STEPS:
- digitalocean.com
- sign-in: 
    username: jee_ti@hotmail.com
    password: Albania2021
- verify 6 digits send by email
- Click on the left side: New Project - Emri: Journal
- create droplet 
    - under Distributions, select and click Ubuntu ver 20.04(LTS) x 64
- Chose the plan: click Basic(shared cpu)
    Basic virtual machines with a mix of memory and compute resources. Best for small projects that 
    can handle variable levels of CPU performance, like blogs, web apps and dev/test environments.
- select the pricing plan and click (I selected chipest pricing plan: $6/month, $0.009hr, 1GB RAM, 25GB NVMeSSD, 1000GB transfer)
    Each Droplet plan includes free outbound data transfer which is shared between all Droplets each billing cycle. 
    Inbound bandwidth to Droplets is always free. Learn more or try our price calculator. 
- Add backup block storage: I do not add anything
- Choose a datacentre region: I choosed Amsterdam
- VPC Networ: default-ams3 (I keep the default one)

- Authentication: fromm SSH and Password I selected Password 
- Create password root password to access Droplet (less secure): 
    Root Password: 2021Journal

- Finalize and create:
    - one droplet 
    - Choose hostname: journal (name of project in lower case)
    - Select Project: Journal 
    - Add backupps: Enable backup(rekomanded)
    A system-level backup is taken once a week, and each backup is retained for 4 weeks. 1.6$/month(20% of droplet price)
- Click: Create droplet 
    Droplet was created: 
        droplet name: journal, AMS3/1GB/25GB Disk  
        IP: 167.71.72.252 (it is important)
        New IP: 64.227.68.172
        Passwor i ri i perkohshem: c6426171416d89d728925d06bb - pas rebuild 

        Destroy IP:  167.71.72.252
        Passwor i ri i perkohshem: 8185e7d60383a797cc5dab78ce - fundit pas prishjes

        Droplet tag: articles_in_django
= Domains(1): voixdufrance.com  3 NS / 1 SOA 
- Meanwile, by email is send new root password; copy and save 
- in activated terminal, to your project, type: 
    (venv_fr).../newspaper/journaux-français (master):ssh root@167.71.72.252 and enter 
    (venv_fr).../newspaper/journaux-français (master):ssh root@64.227.68.172 and enter 

- root password is required; look above: 2021Journal
    copy and paste it. 

root@167.71.72.252's password:2021Journal and enter 

Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-73-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed Sep 22 15:34:28 UTC 2021

  System load:  0.0               Users logged in:       0
  Usage of /:   5.9% of 24.06GB   IPv4 address for eth0: 167.71.72.252
  Memory usage: 19%               IPv4 address for eth0: 10.18.0.5
  Swap usage:   0%                IPv4 address for eth1: 10.110.0.2
  Processes:    99

110 updates can be applied immediately.
57 of these updates are standard security updates.
To see these additional updates run: apt list --upgradable

The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

root@journal:~#

- we are now in ubuntu server, in our droplet: journal 

- search in google: digitalocean django ubuntu postgres tutorial
 click: https://www.digitalocean.com/community/tutorial_collections/how-to-set-up-django-with-postgres-nginx-and-gunicorn
 then click: Ubuntu How To Set Up Django with Postgres, Nginx, and Gunicorn on Ubuntu 20.04 by Erin Glass 
- you will go to this webpage:
    https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04
- Follow the steps on this tutorial
- in terminal, you are:
     root@journal:~#
- for python 3, installing packages from the Ubuntu Repositories, copy from tutorial and paste in terminal: 
    
    ~# sudo apt update
    ~# sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl

- Creating the PostgreSQL Database and User, copy and paste it: 
    root@journal:~# sudo -u postgres psql
    could not change directory to "/root": Permission denied
    psql (12.8 (Ubuntu 12.8-0ubuntu0.20.04.1))
    Type "help" for help.
    
    postgres=#

- now you are in postgres:
    postgres=#
- copy from tutorial: CREATE DATABASE myproject;
    replace myproject with your project name: journal
        CREATE DATABASE journal;  - must end with ;

    postgres=#CREATE DATABASE journal;
- create a database USER for our project. Make sure to select a secure password:
    copy from tutorial: CREATE USER myprojectuser WITH PASSWORD 'password';
    replace myprojectuser with journal - i selected this name for easy remember; 
                                        it is used also as the name of myproject 
    For us, db password:2021Journaldb

    CREATE USER journal WITH PASSWORD '2021Journaldb';  - do not forget ;

- We are setting the default encoding to UTF-8, which Django expects. We are also setting the default
 transaction isolation scheme to “read committed”, which blocks reads from uncommitted transactions. 
 Lastly, we are setting the timezone. By default, our Django projects will be set to use UTC. 
These are all recommendations from the Django project itself (replace myproject with name of your project):
    
- copy from tutorial: 
    ALTER ROLE myprojectuser SET client_encoding TO 'utf8';
    ALTER ROLE myprojectuser SET default_transaction_isolation TO 'read committed';
    ALTER ROLE myprojectuser SET timezone TO 'UTC';
- replace for each myprojectuser with journal

    postgres=#ALTER ROLE journal SET client_encoding TO 'utf8';
    postgres=#ALTER ROLE journal SET default_transaction_isolation TO 'read committed';
    postgres=#ALTER ROLE journal SET timezone TO 'UTC';

- Now, we can give our new USER access to administer our new database:
    GRANT ALL PRIVILEGES ON DATABASE myproject TO myprojectuser;
- replace myproject with journal and myprojectuser with journal
    postgres=#GRANT ALL PRIVILEGES ON DATABASE journal TO journal;
- exit out of the PostgreSQL prompt by typing:
    \q
- we ended creating database; Postgres is now set up so that Django can connect to and manage its database information.
    # follow are all commands we made.

    root@journal:~# sudo -u postgres psql
    could not change directory to "/root": Permission denied
    psql (12.8 (Ubuntu 12.8-0ubuntu0.20.04.1))
    Type "help" for help.

    postgres=# CREATE DATABASE journal;
    CREATE DATABASE
    postgres=# CREATE USER journal WITH PASSWORD '2021Journaldb';
    CREATE ROLE
    postgres=# ALTER ROLE journal SET client_encoding TO 'utf8';
    ALTER ROLE
    postgres=# ALTER ROLE journal SET default_transaction_isolation TO 'read committed';
    ALTER ROLE
    postgres=# ALTER ROLE journal SET timezone TO 'UTC';
    ALTER ROLE
    postgres=# GRANT ALL PRIVILEGES ON DATABASE journal TO journal;
    GRANT
    postgres=# \q
    root@journal:~#

- now we are in journal.

- NEXT STEP: Creating a Python Virtual Environment for your Project
-  install our Python 3 requirements within a virtual environment
    copy from tutorial and paste: 
        sudo -H pip3 install --upgrade pip
        sudo -H pip3 install virtualenv
- view python ver: pytho3 and enter 
    Python 3.8.10 as a default ver for ubunto 20.04
    print quit() and enter 

- we will get this message:
    Successfully installed backports.entry-points-selectable-1.1.0 distlib-0.3.3 filelock-3.0.12 platformdirs-2.3.0 virtualenv-20.8.0
    WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv

    root@journal:~#
- With virtualenv installed, we can start forming our project. 
    Create and move into a directory where we can keep our project files:

        root@journal:~#mkdir ~/myprojectdir
        root@journal:~#cd ~/myprojectdir
############################################### here #################
    from vide 2: djangoprojectdir -> french-news 
                djangoprojectenv -> french_env

    - I selected as myprojectdir: french-news

        root@journal:~# mkdir ~/french-news
        root@journal:~#cd ~/french-news

- we are now:
    root@journal:~/french-news#

### in root dir; not in home/xhevo/french-news dir ??????

- Within the project directory, create a Python virtual environment by typing:
    copy from tutorial: virtualenv myprojectenv
    replace myprojectenv with env_news: 
                virtualenv env_news
    copy and paste to terminal
- it is created succesfull
    created virtual environment CPython3.8.10.final.0-64 in 1076ms
    .......
    root@journal:~/french-news#

- This will create a directory called myprojectenv within your myprojectdir directory. 
    Inside, it will install a local version of Python and a local version of pip. 
    We can use this to install and configure an isolated Python environment for our project.
    Before we install our project’s Python requirements, we need to activate the virtual environment. 
    You can do that by typing:
    Activate ENV: 
        
        root@journal:~/french-news#source env_news/bin/activate

- it is activated; It will look something like this: 

    (myprojectenv)user@host:~/myprojectdir$.
    (env_news) root@journal:~/french-news#

- in your virtual environment active, install Django, Gunicorn, and the psycopg2 PostgreSQL adaptor 
    with the local instance of pip.
    Note: When the virtual environment is activated (when your prompt has (myprojectenv) preceding it), 
    use pip instead of pip3, even if you are using Python 3. The virtual environment’s copy of the tool 
    is always named pip, regardless of the Python version.
        copy from tutorial and paste it to terminal:
            pip install django gunicorn psycopg2-binary
- Result:
    .......
    Installing collected packages: sqlparse, pytz, asgiref, psycopg2-binary, gunicorn, django
    Successfully installed asgiref-3.4.1 django-3.2.7 gunicorn-20.1.0 psycopg2-binary-2.9.1 pytz-2021.1 sqlparse-0.4.2

    (env_news) root@journal:~/french-news# 
- You should now have all of the software needed to start a Django project.

- NEXT STEP - Creating and Configuring a New Django Project
- Creating the Django Project; 
this is the command:
    django-admin.py startproject myproject ~/myprojectdir

in our case myproject will be replaced with journal
and myprojectdir will be replaced with french-news

- this will be the command:
    (env_news) root@journal:~/french-news# django-admin.py startproject journal ~/french-news

- message:
    (env_news) root@journal:~/french-news# django-admin.py startproject journal ~/french-news
    /root/french-news/env_news/bin/django-admin.py:17: RemovedInDjango40Warning: django-admin.py is deprecated 
    in favor of django-admin.
  warnings.warn(
    (env_news) root@journal:~/french-news# 
- this will be the content of dirs:

        (env_news) root@journal:~/french-news# ls
        env_news  journal  manage.py                        - A Django project management script
        (env_news) root@journal:~/french-news# cd journal
        (env_news) root@journal:~/french-news/journal# ls   - The Django project package with files:
        __init__.py  asgi.py  settings.py  urls.py  wsgi.py - 
        (env_news) root@journal:~/french-news/journal#
        (env_news) root@journal:~/french-news# cd env_news
        (env_news) root@journal:~/french-news/env_news#     - virtual environment directory we created earlier
        (env_news) root@journal:~/french-news/env_news#cd ..
        (env_news) root@journal:~/french-news# ls
        env_news  journal  manage.py
        (env_news) root@journal:~/french-news#

- Adjusting the Project Settings
    Open the settings file in your text editor(in terminal of vs code in my case):
        copy from tutorial:
            nano ~/myprojectdir/myproject/settings.py
- make replacements:
        myproject replace with journal
        myprojectdir replace with french-news
- copy and paste to terminal: 
        nano ~/french-news/journal/settings.py

???        (env_news) root@journal:~/french-news#nano ~/french-news/journal/settings.py
OPEN this file by using MobaXterm, look as follows.

- video e dyte: https://www.youtube.com/watch?v=0PJjquyGTOQ
    - download and install mobaxterm.mobatek.net - editor per web server
    - Instalova MobaXterm 
    - Master Password:MobaXterm2021
    - per te aksesuar serverin me IP: 167.71.72.252 cliko Session, 
                                    paste IP - 
                                    click session - 
                                    click ssh - fut perseri 167.71.72.252
                                    specify username: root 
                                    ok - 
                                    in terminal enter password for your username: 2021Journal
                                    create master password: MobaXterm2021!
                                    keep it safe 
                            I make master password to be required for any new windows accont 
                            To end the sessin, click in x in the middle-upper side of terminal
                            To start a new session, dubble click the IP under User swssions, on the left side
- Now I can use ftp of my server, for instance, click /root/french-news/journal
    SO YOU CAN GET ACCESS TO THE TERMINAL AND FTP AT THE SAME timezone.
Jam ne minuten e 18: https://www.youtube.com/watch?v=0PJjquyGTOQ (1:05{29})
    - jam ne terminal: 
        root@journal:~#cd french-news
(env_news) root@journal:~/french-news#
- Activate:
        root@journal:~/french-news#source env_news/bin/activate

System information as of Wed Sep 22 21:03:20 UTC 2021

  System load:  0.0               Users logged in:       1
  Usage of /:   8.0% of 24.06GB   IPv4 address for eth0: 167.71.72.252
  Memory usage: 24%               IPv4 address for eth0: 10.18.0.5
  Swap usage:   0%                IPv4 address for eth1: 10.110.0.2
  Processes:    115
                Minute e 43 copy and paste (VO - I tried drag and drop from vs code. 
                It is wrong; drag and drop must be done from folder where your project is, in your pc)

- take care to be in root@journal:~#  or (env_news) root@journal:~/french-news#
- go to the dir filder when your project is in your pc (NOT in vs code)
    - in my case:F:\djangoProjects\newspaper\journaux-français
- selct all applications you registerd in remote setting.py + templates dir + requirements.txt
- paste them to /root/french-news/ in remote, by using MobaXterm
- these dirs and file are copied in the /root/french-news/, just in the place when manage.py is.
- your remote django project is journal; there is settings.py that we edited, also there is urls.py which 
    needs to edited too. Or delete urls.py in remote and drag and drop urls.py from 
    F:\djangoProjects\newspaper\journaux-français\newsapp\  urls.py file 
- open urls.py and delete media: 
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('news_api.urls', namespace='home')),
    path('', include('articles.urls', namespace='index')),
]
if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

- create static dir 
- drag and drop all static folders and files from your project to static dir you just created 
- copy your logo, if you have, to static 

####

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'journal',
            'USER': 'journal',
            'PASSWORD': '2021Journaldb',
            'HOST': 'localhost',
            'PORT': '',
        }
    }


STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'assets')

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('news_api.urls', namespace='home')),
    path('', include('articles.urls', namespace='index')),
]
if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

#####
- now, under french-news, and env activated, in the terminal, run:
(env_news) root@journal:~/french-news#pip3 install -r requirements.txt 

v.O from now you can follow instractions in this doc, we useed before:
https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04

- make migrations:
(env_news) root@journal:~/french-news#python manage.py makemigrations

- make migrate\\: ....migrate 
- run collectstatic:
    (env_news) root@journal:~/french-news# python manage.py collectstatic
- now, run following command to tell firewalls to allow port 8000 in my server:
    (env_news) root@journal:~/french-news# sudo ufw allow 8000
- RUN SERVER in 0.0.0.0:8000 just for testing gunicorn:
    (env_news) root@journal:~/french-news# python manage.py runserver 0.0.0.0:8000
- open google browser and paste your IP address:
    167.71.72.252:8000
- it is running fine; the page is in browser. It is done in manual way.
    We will use gunicorn to start server automaticlly.
- ctrl + c - to stop the server 
- run gunicorn:
    (env_news) root@journal:~/french-news# gunicorn --bind 0.0.0.0:8000 journal.wsgi

- refresh the page; it is running
- run: admin in the page (needs time...) create superuser?
- ctrl + c to stop the server
- now we will create Socket and Service Files for Gunicorn and Nginx

- deactivate our remote virtual machine(we will not use more virtual env)
    (env_news) root@journal:~/french-news# deactivate
    root@journal:~/french-news#

- install everything that was installed in virtual env:
    root@journal:~/french-news# pip3 install -r requirements.txt
    root@journal:~/french-news# 

##################################################################################

- create gunicorn dir and open socket file (view document: ):
    root@journal:~/french-news# sudo nano /etc/systemd/system/gunicorn.socket

 - copy from doc and paste:

 - create service: 
    root@journal:~/french-news# sudo nano /etc/systemd/system/gunicorn.service
 copy from doc and paste to editor and make changes, as User, WorkingDir, ExecStart, mysite:
 Perdora si User xhevo - e bera admin 
    
[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
User=xhevo
Group=www-data
WorkingDirectory=/home/xhevo/french-news
ExecStart=/home/xhevo/french-news/env_news/bin/gunicorn \
          --access-logfile - \
          --workers 3 \
          --bind unix:/run/gunicorn.sock \
          journal.wsgi:application

[Install]
WantedBy=multi-user.target

- start the socket:

    root@journal:~/french-news# sudo systemctl start gunicorn.socket
- enable socket: 
    root@journal:~/french-news# sudo systemctl enable gunicorn.socket

- check the status of the proces to find out wether it was able to start:
    root@journal:~/french-news# file /run/gunicorn.sock
 the result: 
        file /run/gunicorn.sock: socket
    It is ok.
- also, check status of the proces: 
    root@journal:~/french-news# sudo systemctl status gunicorn

- to test socket activation; 
    sudo systemctl daemon-reload
    sudo systemctl restart gunicorn

    curl --unix-socket /run/gunicorn.sock localhost

    IP: 167.71.72.252

- CREATE NON-ROOT USER 
video 2: permendur ne fillim; rreth min se 18-te dhe faqet ne vijim:
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04
https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-20-04

root@journal:~/# adduser xhevo  -V:O eshte me shkronja te vogla: xhevo
    root@journal:~# adduser xhevo
    Adding user `xhevo' ...
    Adding new group `xhevo' (1000) ...
    Adding new user `xhevo' (1000) with group `xhevo' ...
    Creating home directory `/home/xhevo' ...
    Copying files from `/etc/skel' ...

- PASSWORD:    Enter new password:Ubuntu20.04

if you are in / in MobaXterm, it is created a new dir: home 
- if you dubble-click in home you will find dir xhevo 

WE WILL PUT OUR DJANGO PROJECT UNDER xhevo. But you can make any changes in root.

- As root, run this command to add your new user to the sudo group 
to give some permissions (19:52 e video 2):

        root@journal:~/# usermod -aG sudo xhevo

- test it: root@journal:~/# ssh xhevo@167.71.72.252
           xhevo@journal:~/#
    Lidhja u krye. Type: exit 
          root@journal:~/#

- we will stay logging with password for root and xhevo (not with ssh public and private keys)

- Satting up basic firewalls:
    root@journal:~/# ufw app list

    root@journal:~/# ufw allow OpenSSH
- enable firewall
    ufw enable
- view ssh status:
        ufw status
- run: sudo apt update
- change dir: cd /home/xhevo
###############################################################
 djangoprojectdir -> french-news 

- in home/xhevo: mkdir french-news 
- type: ls  - it is created 
- cd french-news/ 
- virtualenv french-env ???????????????????? -> djangoprojectenv 
- activate: $ source env_news/bin/activate
        it is activated 
    (french-env) root@journal:/home/xhevo/french-news#

- (french-env) root@journal:/home/xhevo/french-news# pip3 install gunicorn
- (french-env) root@journal:/home/xhevo/french-news# pip3 install Django==3.2.7
- cd.. 
    (french-env) root@journal:/home/xhevo#
############ mitch run:  django-admin startproject mysite djangoprojectdir ###### mysite - > journal ##########

-   xhevo run: django-admin startproject journal french-news 
- edit settings.py - shiko me siper; e kam bere njehere 
- Must be on the root user:
    - drag and drop from f::\....\ 
        articles
        news_api
        templates
        requirements.txt
- delete urls.py under journal and drag and drop from newsapi - shiko me siper per detaje 
- cd journal 
- pip3 install -r requirements.txt 
- makemigrations
- collectstatic 
- sudo ufw allow 8000
- python manage.py runserver 0.0.0.0:8000
- run the server manually -new tab in google: 
            167.71.72.252:8000  - del faqa 
- ctrl + c to stop the server 
- run server using gunicon: gunicorn --bind 0.0.0.0:8000 journal.wsgi
- refresh page; it works agin.
- admin/ - kekron pak kohe por hapet; pastaj behet shpejt
- ctrl+ c 
- deactivate virtualenv
No more venev, but gunicorn and nginx to start server automatically
- pip3 install gunicon
- pip3 install -r requirements.txt
- Creating systemd Socket and Service Files for Gunicorn
    sudo nano /etc/systemd/system/gunicorn.socket
    sudo nano /etc/systemd/system/gunicorn.service

[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
User=xhevo
Group=www-data
WorkingDirectory=/home/xhevo/french-news
ExecStart=/home/xhevo/french-news/french-env/bin/gunicorn \
          --access-logfile - \
          --workers 3 \
          --bind unix:/run/gunicorn.sock \
          journal.wsgi:application

[Install]
WantedBy=multi-user.target

- start the socket and enable:

sudo systemctl start gunicorn.socket
sudo systemctl enable gunicorn.socket

- check it 
    sudo systemctl status gunicorn.socket
- check for the existence of the gunicorn.sock file within the /run directory:
    file /run/gunicorn.sock

- Testing Socket Activation
    sudo systemctl status gunicorn
- failed to run daemon 
ctrl + c 
    sudo systemctl daemon-reload
    sudo systemctl restart gunicorn

sudo shutdown -r now to stop the server then login again 

Shenim I ribera te dy filat dhe deri ketu jam ne rregull.
    55:35 video 2

- run: 
    curl --unix-socket /run/gunicorn.sock localhost
- ne rregull 
- check all the status:
    sudo systemctl status gunicorn


- Configure Nginx to Proxy Pass to Gunicorn 
Now that Gunicorn is set up, we need to configure Nginx to pass traffic to the process.
    58:31

- be in home/xhevo: - change dir: /home/xhevo
- install Nginx
    sudo apt install nginx

- create nginx file:
    sudo nano /etc/nginx/sites-available/journal

- copy and paste to it: 
server {
    listen 80;
    server_name server_domain_or_IP;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/sammy/myprojectdir;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
    }
}

- server domain name: ns3.digitalocean.com.
                IP: 167.71.72.252

- make connection:
    sudo ln -s /etc/nginx/sites-available/journal /etc/nginx/sites-enabled

- check connection:
    sudo nginx -t

    succesfull
- run: sudo systemctl restart nginx
- Finally, we need to open up our firewall to normal traffic on port 80. 
Since we no longer need access to the development server, we can remove the rule to open port 8000 as well:

    sudo ufw delete allow 8000
    sudo ufw allow 'Nginx Full'


https://codingwithmitch.com/courses/building-a-website-django-python/bug-fixes-part-1/
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04
https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-20-04
https://github.com/justdjango/dream_blog/blob/master/blog/settings.py